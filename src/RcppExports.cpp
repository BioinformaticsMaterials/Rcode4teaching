// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// HOCsim
NumericMatrix HOCsim(const unsigned& N, const double& mu, const double& sigmamu, const double& sigmae, const double& sigmas, const unsigned& ngens);
RcppExport SEXP Rcode4teaching_HOCsim(SEXP NSEXP, SEXP muSEXP, SEXP sigmamuSEXP, SEXP sigmaeSEXP, SEXP sigmasSEXP, SEXP ngensSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const unsigned& >::type N(NSEXP );
        Rcpp::traits::input_parameter< const double& >::type mu(muSEXP );
        Rcpp::traits::input_parameter< const double& >::type sigmamu(sigmamuSEXP );
        Rcpp::traits::input_parameter< const double& >::type sigmae(sigmaeSEXP );
        Rcpp::traits::input_parameter< const double& >::type sigmas(sigmasSEXP );
        Rcpp::traits::input_parameter< const unsigned& >::type ngens(ngensSEXP );
        NumericMatrix __result = HOCsim(N, mu, sigmamu, sigmae, sigmas, ngens);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// HOCsim_exp
NumericMatrix HOCsim_exp(const unsigned& N, const double& mu, const double& sigmamu, const double& sigmae, const double& sigmas, const unsigned& ngens);
RcppExport SEXP Rcode4teaching_HOCsim_exp(SEXP NSEXP, SEXP muSEXP, SEXP sigmamuSEXP, SEXP sigmaeSEXP, SEXP sigmasSEXP, SEXP ngensSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const unsigned& >::type N(NSEXP );
        Rcpp::traits::input_parameter< const double& >::type mu(muSEXP );
        Rcpp::traits::input_parameter< const double& >::type sigmamu(sigmamuSEXP );
        Rcpp::traits::input_parameter< const double& >::type sigmae(sigmaeSEXP );
        Rcpp::traits::input_parameter< const double& >::type sigmas(sigmasSEXP );
        Rcpp::traits::input_parameter< const unsigned& >::type ngens(ngensSEXP );
        NumericMatrix __result = HOCsim_exp(N, mu, sigmamu, sigmae, sigmas, ngens);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// VGVEdistHOC
DataFrame VGVEdistHOC(const unsigned& N, const double& mu, const double& sigmamu, const double& sigmae, const double& sigmas, const unsigned& ngens, const unsigned& nreps, const bool& gaussian = true);
RcppExport SEXP Rcode4teaching_VGVEdistHOC(SEXP NSEXP, SEXP muSEXP, SEXP sigmamuSEXP, SEXP sigmaeSEXP, SEXP sigmasSEXP, SEXP ngensSEXP, SEXP nrepsSEXP, SEXP gaussianSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const unsigned& >::type N(NSEXP );
        Rcpp::traits::input_parameter< const double& >::type mu(muSEXP );
        Rcpp::traits::input_parameter< const double& >::type sigmamu(sigmamuSEXP );
        Rcpp::traits::input_parameter< const double& >::type sigmae(sigmaeSEXP );
        Rcpp::traits::input_parameter< const double& >::type sigmas(sigmasSEXP );
        Rcpp::traits::input_parameter< const unsigned& >::type ngens(ngensSEXP );
        Rcpp::traits::input_parameter< const unsigned& >::type nreps(nrepsSEXP );
        Rcpp::traits::input_parameter< const bool& >::type gaussian(gaussianSEXP );
        DataFrame __result = VGVEdistHOC(N, mu, sigmamu, sigmae, sigmas, ngens, nreps, gaussian);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
